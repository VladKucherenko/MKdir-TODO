[{"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx":"1","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js":"2","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts":"3","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx":"4","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts":"5","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts":"6","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts":"7","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx":"8","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx":"9","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx":"10","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx":"11","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts":"12","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts":"13","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx":"14","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts":"15","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx":"16","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx":"17","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts":"18","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx":"19","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx":"20","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts":"21","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx":"22","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Sidebar.tsx":"23"},{"size":678,"mtime":1612462459249,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1612301873000,"results":"26","hashOfConfig":"25"},{"size":1138,"mtime":1612355823483,"results":"27","hashOfConfig":"25"},{"size":2758,"mtime":1612462450241,"results":"28","hashOfConfig":"25"},{"size":2438,"mtime":1612461126783,"results":"29","hashOfConfig":"25"},{"size":6036,"mtime":1612461255724,"results":"30","hashOfConfig":"25"},{"size":537,"mtime":1612461026222,"results":"31","hashOfConfig":"25"},{"size":2061,"mtime":1612382306691,"results":"32","hashOfConfig":"25"},{"size":1092,"mtime":1612382324928,"results":"33","hashOfConfig":"25"},{"size":173,"mtime":1612345647016,"results":"34","hashOfConfig":"25"},{"size":1738,"mtime":1612463336927,"results":"35","hashOfConfig":"25"},{"size":4132,"mtime":1612387984416,"results":"36","hashOfConfig":"25"},{"size":290,"mtime":1612460837630,"results":"37","hashOfConfig":"25"},{"size":1480,"mtime":1612456166402,"results":"38","hashOfConfig":"25"},{"size":589,"mtime":1612382351395,"results":"39","hashOfConfig":"25"},{"size":563,"mtime":1612345534635,"results":"40","hashOfConfig":"25"},{"size":2840,"mtime":1612456174851,"results":"41","hashOfConfig":"25"},{"size":6506,"mtime":1612461313826,"results":"42","hashOfConfig":"25"},{"size":922,"mtime":1612456201839,"results":"43","hashOfConfig":"25"},{"size":4187,"mtime":1612456209399,"results":"44","hashOfConfig":"25"},{"size":650,"mtime":1612382168368,"results":"45","hashOfConfig":"25"},{"size":1514,"mtime":1612456221678,"results":"46","hashOfConfig":"25"},{"size":2154,"mtime":1612463522386,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1jfjkih",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"55"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"55"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"76","usedDeprecatedRules":"55"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"55"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"55"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"55"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"55"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"55"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"55"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"55"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js",[],["105","106"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts",[],["107","108"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx",["109","110","111"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts",["112"],"import { todoAPI } from './../../api/api';\nimport { ListType, TaskType } from '../../api/api';\nimport { AppStateType, BasicThunkType, InferActionsType } from '../redux-store';\n\nconst SET_LISTS = 'TDL/TODO-REDUCER/SET-LISTS';\nconst CREATE_LIST = 'TDL/TODO-REDUCER/CREATE-LIST';\nconst DELETE_LIST = 'TDL/TODO-REDUCER/DELETE-LIST';\nconst RENAME_LIST = 'TDL/TODO-REDUCER/RENAME-LIST';\nconst CHANGE_ORD = 'TDL/TODO-REDUCER/CHANGE-ORD';\nconst IS_FETCH = 'TDL/TODO-REDUCER/IS-FETCH';\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\n\nconst initialState = {\n    lists: [] as Array<ListType>,\n    isFetching: false,\n    message: null as null | string\n}\n\nconst toDoReducer = (state = initialState, action: actionsTodoType): InitialStateType => {\n\n    switch (action.type) {\n        case SET_LISTS: {\n            return {\n                ...state,\n                lists: action.lists\n            }\n        }\n        case CREATE_LIST: {\n            return {\n                ...state,\n                lists: [action.list, ...state.lists]\n            }\n        }\n        case DELETE_LIST: {\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.todolistId)\n            }\n        }\n        case RENAME_LIST: {\n            return {\n                ...state,\n                lists: state.lists.map(list => { if (list._id === action.todolistId) { return { ...list, title: action.title } } else return list })\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        case SETERROR: {\n            return {\n                ...state,\n                message: action.message\n            }\n        }\n        case CHANGE_ORD: {\n            let a, indexs = 0;\n            let array = state.lists;\n\n            array.forEach((elem, index) => {\n                if (elem._id === action.todolistId) {\n                    indexs = index;\n                }\n            })\n\n            a = array[indexs];\n            array[indexs] = array[indexs + 1];\n            array[indexs + 1] = a;\n            return {\n                ...state,\n                lists: array.map(item => { return item })\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\nexport const actionsTodo = {\n    setLists: (lists: Array<ListType>) => ({ type: SET_LISTS, lists } as const),\n    createList: (list: any) => ({ type: CREATE_LIST, list } as const),\n    deleteList: (todolistId: string) => ({ type: DELETE_LIST, todolistId } as const),\n    renameTitle: (todolistId: string, title: string) => ({ type: RENAME_LIST, todolistId, title } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const),\n    changeOrder: (todolistId: string, putAfterItemId: string) => ({ type: CHANGE_ORD, todolistId, putAfterItemId } as const)\n}\n\nexport const getLists = (): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.getToDoLists(getState().authR.user.token);\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setLists(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n\n}\n\nexport const postList = (title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.postToDoLists(title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.createList(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const deleteListThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.deleteToDoList(todolistId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.deleteList(todolistId))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\n\nexport const renameTitleThunk = (todolistId: string, title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.renameToDoList(todolistId, title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.renameTitle(todolistId, title))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const changeOrderThunk = (todolistId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.reorderToDoList(todolistId, putAfterItemId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.changeOrder(todolistId, putAfterItemId));\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\nexport default toDoReducer;\n\nexport type InitialStateType = typeof initialState\ntype actionsTodoType = InferActionsType<typeof actionsTodo>\ntype ThunkType = BasicThunkType<actionsTodoType>\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx",["113"],"import { Formik } from \"formik\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport { signUpThunk } from \"../../../redux/auth/auth-reducer\"\nimport { getAuthMessage } from \"../../../redux/auth/auth-selectors\"\ntype PropsType = {\n    \n}\n\nexport const SignUpPage: React.FC<PropsType> = () => {\n  \n  const dispatch = useDispatch()\n  const history = useHistory()\n  const errors = useSelector(getAuthMessage)\n  \n    const submitHandler = async (values: SignUpValuesType, actions: any) => {\n      let response: any\n      if(values){\n        response = await dispatch(signUpThunk(values))\n        !errors && history.push('/login')\n      }\n    }\n    \n    return (<div>\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: ''\n            }}\n            onSubmit={submitHandler}\n        >\n       {props => (\n         <form onSubmit={props.handleSubmit}>\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='First name'\n             name=\"firstName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Last name'\n             name=\"lastName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Email'\n             name=\"email\"\n           />\n           <input\n             type=\"password\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Password'\n             name=\"password\"\n           />\n           \n           <button type=\"submit\">Submit</button>\n         </form> \n       )}\n     </Formik>\n    </div>)\n}\n\nexport type SignUpValuesType = {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx",["114","115","116","117"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts",["118"],"import { LogInValuesType } from './../components/Auth/LogIn/LogIn';\n\nimport axios from 'axios'\nimport { SignUpValuesType } from '../components/Auth/SignUp/SignUp';\n\nconst instance = axios.create({\n    headers: {\n        ['Content-Type']: 'application/json'\n    }\n});\n\n\n\nexport const authAPI = {\n    logIn(user: LogInValuesType) {\n        return instance.post(`/api/auth/login`, user)\n            .then(response => response.data)\n    },\n    signUp(user: SignUpValuesType) {\n        return instance.post(`/api/auth/register`, user)\n            .then(response => response.data)\n    }\n}\nexport const todoAPI = {\n    getToDoLists(token: string) {\n        return instance.get(`/api/todo/lists`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postToDoLists(title: string, token: string) {\n        return instance.post(`/api/todo/lists`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    renameToDoList(todolistId: string, title: string, token: string) {\n        return instance.put(`/api/todo/lists/${todolistId}`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteToDoList(todolistId: string, token: string) {\n        return instance.delete(`/api/todo/lists/${todolistId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    reorderToDoList(todolistId: string, putAfterItemId: string, token: string) {\n\n        return instance.put(`/api/todo/lists/${todolistId}/reorder`, { putAfterItemId }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport const tasksAPI = {\n    getTasks(todolistId: string, token: string){\n        return instance.get(`/api/tasks/${todolistId}/tasks`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postTasks(todolistId: string, title: string, token: string){\n        return instance.post(`/api/tasks/${todolistId}/tasks`, {title}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteTasks(todolistId: string, taskId: string, token: string){\n        return instance.delete(`/api/tasks/${todolistId}/tasks/${taskId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    updateTasks(todolistId: string, taskId: string, updateTask: UpdatedTaskType, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}`, updateTask, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    reorderTasks(todolistId: string, taskId: string, putAfterItemId: string, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}/reorder`, {putAfterItemId}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport type UpdatedTaskType = {\n    title: string,\n    completed: boolean,\n    deadline: Date,\n    description: string\n}\n\nexport type TaskType = {\n    _id: string,\n    description: String,\n    title:  string,\n    // priority: Number,\n    completed: boolean,\n    startDate: Date,\n    deadline: string,\n    order: number,\n    listId: string,\n}\n\nexport type UserType = {\n    firstName: null | string,\n    lastName: null | string,\n    token: null | string\n}\n\nexport type ListType = {\n    _id: string,\n    title: string,\n    addedDate: Date,\n    order: number,\n    tasks: Array<any>  ////????any\n}\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx",["119"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists, postList } from '../../redux/todo/todo-reducer';\r\nimport { getIsFetching } from '../../redux/todo/todo-selectors';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport List from './List';\r\nimport style from './Lists.module.scss';\r\n// import List from './List';\r\n// import Preloader from '../Common/Preloader';\r\n\r\nconst Lists = React.memo(props => {\r\n\r\n    let [newTitle, changeNewTitle] = useState('');\r\n    const isFetching = useSelector(getIsFetching)\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        \r\n        dispatch(getLists());\r\n    }, []);\r\n    \r\n    let onTitleChangeText = (text: string) => {\r\n        changeNewTitle(text);\r\n    }\r\n\r\n    let addTitle = () => {\r\n        dispatch(postList(newTitle));\r\n        changeNewTitle('');\r\n    }\r\n\r\n    return (<div>\r\n\r\n        <div className={style.newTitle}>\r\n            <span className={style.textTitle}>\r\n                Enter new title\r\n            </span>\r\n            <div>\r\n                <textarea value={newTitle} onChange={(e) => onTitleChangeText(e.currentTarget.value)}/>\r\n                <input onClick={addTitle} type=\"button\" value=\"Create\" />\r\n            </div>\r\n\r\n        </div>\r\n        {isFetching && <Preloader/>}\r\n        <div className={style.content}>\r\n            <List />\r\n        </div>\r\n\r\n    </div>)\r\n});\r\n\r\nexport default Lists;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx",["120","121"],"import style from './Lists.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists } from '../../redux/todo/todo-selectors';\r\nimport { ListType, UserType } from '../../api/api';\r\nimport { changeOrderThunk, deleteListThunk, renameTitleThunk } from '../../redux/todo/todo-reducer';\r\nimport Tasks from './Task/Tasks';\r\n\r\n\r\nconst List: React.FC<any> = (props) => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTitle, changeTitle] = useState('');\r\n    let [newTitleText, changeNewTitleText] = useState('');\r\n    const dispatch = useDispatch()\r\n    const lists = useSelector(getLists)\r\n\r\n\r\n    let deleteList = (todolistId: string) => {\r\n        dispatch(deleteListThunk(todolistId));\r\n    }\r\n\r\n    let updateTitle = () => {\r\n        //thunk\r\n        dispatch(renameTitleThunk(choosedTitle, newTitleText));\r\n        changeEditMode(false);\r\n        changeNewTitleText('');\r\n    }\r\n\r\n    let activateEditMode = (text: string, id: string) => {\r\n        changeTitle(id);\r\n        changeNewTitleText(text);\r\n        changeEditMode(true);\r\n    }\r\n    let changeOrder = (todolistId: string, putAfterItemId: string) => {\r\n        dispatch(changeOrderThunk(todolistId, putAfterItemId));\r\n    }\r\n\r\n    let listsArray = lists && lists.map((list: ListType, index: number, array: Array<ListType>) => {\r\n        let date = new Date(list.addedDate)\r\n        return (<div key={list._id} className={style.listUI}>\r\n            <div className={style.title}>\r\n                <span>\r\n                    {(editMode && list._id === choosedTitle)\r\n                        ? <input onBlur={updateTitle} autoFocus={true} onChange={(e) => changeNewTitleText(e.currentTarget.value)} value={newTitleText}></input>\r\n                        : <span onDoubleClick={() => activateEditMode(list.title, list._id)}>{list.title}</span>\r\n                    }\r\n                </span>\r\n                <span onClick={() => deleteList(list._id)} className={style.delTitle}>\r\n                    X\r\n                </span>\r\n            </div>\r\n            <div className={style.tasks}>\r\n                <div>\r\n                    <Tasks listId={list._id}/>\r\n                </div>\r\n            </div>\r\n            <div> \r\n                {index < array.length-1 && <input onClick={() => changeOrder(array[index]._id, array[index+1]._id)} type=\"button\" value='-'/> }\r\n                {index > 0 && <input onClick={() => changeOrder(array[index-1]._id, array[index]._id)} type=\"button\" value='+'/> }\r\n             </div>\r\n             <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\r\n        </div>);\r\n    });\r\n\r\n    return (<>\r\n        {listsArray}\r\n    </>);\r\n}\r\nexport default List;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts",["122"],"// import { tasksAPI, toDoAPI } from \"../api/api\";\r\n\r\nimport { isTryStatement } from \"typescript\"\r\nimport { tasksAPI, TaskType, UpdatedTaskType } from \"../../api/api\"\r\nimport { AppStateType, BasicThunkType, InferActionsType } from \"../redux-store\"\r\n\r\nconst GET_TASKS = 'GET-TASKS'\r\nconst POST_TASK = 'POST-TASK'\r\nconst DEL_TASK = 'DEL_TASK'\r\nconst UPDATE_TASK = 'UPDATE-TASK'\r\nconst REORDER_TASK = 'REORDER-TASK'\r\nconst IS_FETCH = 'IS-FETCH';\r\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\r\n\r\nconst initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    default: {\r\n        description: 'no desc',\r\n        completed: false,\r\n        status: 0,\r\n        priority: 1,\r\n        startDate: '2020',\r\n        deadline: 'today'\r\n    },\r\n    isFetching: false,\r\n    message: null as null | string\r\n}\r\n\r\nexport const toDoTasksReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        }\r\n        case POST_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [action.taskItem, ...state.tasks]\r\n            }\r\n        }\r\n        case IS_FETCH: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.bool\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(elem => elem._id !== action.taskId)\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if (task._id === action.taskId) {\r\n                        return action.item;\r\n                    }\r\n                    else return task;\r\n                })\r\n            }\r\n        }\r\n        case REORDER_TASK: {\r\n            let a, indexs = 0;\r\n            let array = state.tasks;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem._id === action.taskId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n\r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;\r\n            return {\r\n                ...state,\r\n                tasks: array.map(item => { return item })\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actionsTodoTask = {\r\n    getTasks: (tasks: Array<TaskType>) => ({ type: GET_TASKS, tasks } as const),\r\n    postTasks: (taskItem: TaskType) => ({ type: POST_TASK, taskItem } as const),\r\n    deleteTask: (taskId: string) => ({ type: DEL_TASK, taskId } as const),\r\n    updateTask: (taskId: string, item: any) => ({ type: UPDATE_TASK, taskId, item } as const),\r\n    reorderTask: (taskId: string) => ({ type: REORDER_TASK, taskId } as const),\r\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\r\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const)\r\n\r\n}\r\n\r\n\r\nexport const getTasksThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.getTasks(todolistId, getState().authR.user.token)\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.getTasks(response))\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const postTasksThunk = (todolistId: string, newTaskTitle: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.postTasks(todolistId, newTaskTitle, getState().authR.user.token);\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.postTasks(response));\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const deleteTaskThunk = (todolistId: string, taskId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.deleteTasks(todolistId, taskId, getState().authR.user.token);\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.deleteTask(taskId));\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const updateTaskThunk = (\r\n    todolistId: string,\r\n    taskId: string,\r\n    updatedTaskObject: UpdatedTaskType): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(actionsTodoTask.isFetching(true))\r\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject, getState().authR.user.token);\r\n            dispatch(actionsTodoTask.isFetching(false))\r\n            dispatch(actionsTodoTask.updateTask(taskId, response.updatedTask))\r\n            dispatch(actionsTodoTask.setErrors(response.message))\r\n        } catch (e) {\r\n            dispatch(actionsTodoTask.isFetching(false))\r\n            dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n        }\r\n    }\r\n\r\nexport const reorderTaskThunk = (todolistId: string, taskId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    \r\n    try{\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId, getState().authR.user.token)\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    }catch(e){\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n    \r\n    dispatch(actionsTodoTask.reorderTask(taskId));\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actionsTodoTask>\r\ntype ThunkType = BasicThunkType<ActionsType>","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx",["123"],"import React, { useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getTasksThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport Task from './Task';\r\nimport style from './Tasks.module.scss';\r\ntype PropsType = {\r\n    listId: string\r\n}\r\n\r\nconst Tasks: React.FC<PropsType> = React.memo(props => {\r\n\r\n    let [viewMode, changeViewMode] = useState(false);\r\n    const dispatch = useDispatch()\r\n    \r\n    let viewTasks = (listId: string) => {\r\n        changeViewMode(!viewMode);\r\n        dispatch(getTasksThunk(listId))\r\n        \r\n    }\r\n{/* <img src={arrowDown} alt='arrowDown'></img> */}\r\n \r\n    return (\r\n        <div>\r\n            <span  className={style.viewTasks} onClick={() => viewTasks(props.listId)}> + </span>\r\n            {viewMode && <div>\r\n                <Task listId={props.listId}  />\r\n            </div>}\r\n            \r\n        </div>\r\n    );\r\n});\r\nexport default Tasks;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx",["124"],"import React, { useState } from 'react';\r\nimport Description from './Description';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTasks } from '../../../redux/todo-tasks/todoTask-selectors';\r\nimport style from './Tasks.module.scss';\r\nimport { deleteTaskThunk, postTasksThunk, reorderTaskThunk, updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport { TaskType } from '../../../api/api';\r\n\r\ntype PropsType = {\r\n    listId: string\r\n}\r\n\r\nconst Task: React.FC<PropsType> = React.memo(props => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector(getTasks)\r\n    let [newTaskTitle, changeNewTask] = useState('');\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [TaskText, changeTaskText] = useState('');\r\n    let [choosedTask, changeChoosedTask] = useState('');\r\n\r\n\r\n    let deleteTask = (taskId: string) => {\r\n        dispatch(deleteTaskThunk(props.listId, taskId))\r\n    }\r\n\r\n    let setTaskText = (text: string) => {\r\n        changeTaskText(text);\r\n    }\r\n\r\n    let setStatusModeTrue = (text: string, taskId: string) => {\r\n        changeChoosedTask(taskId)\r\n        changeTaskText(text);\r\n        changeEditMode(!editMode);\r\n    }\r\n\r\n\r\n    let changeOrderTasks = (taskId: string, putAfterItemId: string) => {\r\n        dispatch(reorderTaskThunk(props.listId, taskId, putAfterItemId))\r\n    }\r\n\r\n    \r\n    let setStatusModeFalse = (task: any) => {\r\n        changeEditMode(!editMode);\r\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, title:TaskText}))\r\n    }\r\n    let changeCheckBox = (bool: boolean, task: any) => {\r\n        let intBool = Number(bool);\r\n        dispatch(updateTaskThunk(props.listId, task.id, {...task, completed: intBool }))\r\n    }\r\n\r\n    let taskArray = tasks && tasks.map((task: TaskType, index: number, array: Array<TaskType>) => {\r\n        if (task.listId === props.listId) {\r\n            let date = new Date(task.startDate)\r\n            return <div key={task._id} className={style.taskItem}>\r\n                <div>\r\n                    {(editMode && choosedTask === task._id)\r\n                        ? <input autoFocus={true} onBlur={() => setStatusModeFalse(task)} onChange={(e) => setTaskText(e.currentTarget.value)} type=\"text\" value={TaskText} />\r\n                        : <span onDoubleClick={() => setStatusModeTrue(task.title, task._id)}>{task.title}</span>\r\n                    }\r\n                    <span onClick={() => deleteTask(task._id)} className={style.delete}>X</span> \r\n                    <input checked={task.completed} //CHECKBOX\r\n                        onChange={(e) => changeCheckBox(e.currentTarget.checked, task)}\r\n                        className={style.complete}\r\n                        type='checkbox'>\r\n\r\n                    </input>\r\n                    <div>\r\n                        <Description\r\n                            task={task}\r\n                            taskId={task._id}\r\n                            listId={props.listId} />\r\n                    </div>\r\n                    <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\r\n                    <div>\r\n                        {index < array.length - 1 && <input onClick={() => changeOrderTasks(array[index]._id, array[index + 1]._id)} type=\"button\" value='-' />}\r\n                        {index > 0 && <input onClick={() => changeOrderTasks(array[index - 1]._id, array[index]._id)} type=\"button\" value='+' />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    });\r\n\r\n    let onTaskChangeText = (text: string) => {\r\n        changeNewTask(text);\r\n    }\r\n\r\n    let addTask = () => {\r\n\r\n        dispatch(postTasksThunk(props.listId, newTaskTitle))\r\n        changeNewTask('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={newTaskTitle} onChange={(e) => onTaskChangeText(e.currentTarget.value)} />\r\n                <input onClick={addTask} type=\"button\" value=\"Add\" />\r\n            </div>\r\n            <div>\r\n                {taskArray}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n});\r\nexport default Task;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx",["125","126","127","128"],"import style from './Tasks.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport { TaskType, UpdatedTaskType } from '../../../api/api';\r\n\r\ntype PropsType = {\r\n    listId: string,\r\n    task: any,\r\n    taskId: string\r\n}\r\nconst Description: React.FC<PropsType> = props => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTaskId, changeChoosedTaskId ] = useState('');\r\n    let [newDesc, changeNewDesc] = useState(props.task.description);\r\n    const dispatch = useDispatch()\r\n\r\n    let turnEditMode = () => {\r\n        changeEditMode(!editMode);\r\n        changeChoosedTaskId(props.taskId);\r\n    }\r\n\r\n    let onChangeDesc = (newText: string) => {\r\n        changeNewDesc(newText);\r\n    }\r\n    let updateDesc = (task: any) => {\r\n        changeEditMode(!editMode);\r\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, description: newDesc}))\r\n        debugger\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            {(editMode && choosedTaskId === props.taskId)\r\n            ? <textarea onBlur={() => updateDesc(props.task)} onChange={(e) => onChangeDesc(e.currentTarget.value)} autoFocus={true} value={newDesc}></textarea>\r\n            :<span onDoubleClick={turnEditMode}>{props.task.description}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nconst DescriptionMemoization = React.memo(Description)\r\nexport default DescriptionMemoization","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Sidebar.tsx",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":36,"column":6,"nodeType":"135","endLine":36,"endColumn":43,"suggestions":"136"},{"ruleId":"133","severity":1,"message":"137","line":48,"column":6,"nodeType":"135","endLine":48,"endColumn":8,"suggestions":"138"},{"ruleId":"133","severity":1,"message":"139","line":57,"column":6,"nodeType":"135","endLine":57,"endColumn":20,"suggestions":"140"},{"ruleId":"141","severity":1,"message":"142","line":2,"column":20,"nodeType":"143","messageId":"144","endLine":2,"endColumn":28},{"ruleId":"141","severity":1,"message":"145","line":19,"column":9,"nodeType":"143","messageId":"144","endLine":19,"endColumn":17},{"ruleId":"141","severity":1,"message":"146","line":4,"column":10,"nodeType":"143","messageId":"144","endLine":4,"endColumn":21},{"ruleId":"141","severity":1,"message":"147","line":8,"column":24,"nodeType":"143","messageId":"144","endLine":8,"endColumn":34},{"ruleId":"141","severity":1,"message":"148","line":10,"column":26,"nodeType":"143","messageId":"144","endLine":10,"endColumn":32},{"ruleId":"141","severity":1,"message":"149","line":15,"column":11,"nodeType":"143","messageId":"144","endLine":15,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":8,"column":9,"nodeType":"152","messageId":"153","endLine":8,"endColumn":45,"fix":"154"},{"ruleId":"133","severity":1,"message":"137","line":20,"column":8,"nodeType":"135","endLine":20,"endColumn":10,"suggestions":"155"},{"ruleId":"141","severity":1,"message":"156","line":2,"column":17,"nodeType":"143","messageId":"144","endLine":2,"endColumn":26},{"ruleId":"141","severity":1,"message":"157","line":5,"column":20,"nodeType":"143","messageId":"144","endLine":5,"endColumn":28},{"ruleId":"141","severity":1,"message":"158","line":3,"column":10,"nodeType":"143","messageId":"144","endLine":3,"endColumn":24},{"ruleId":"159","severity":1,"message":"160","line":20,"column":1,"nodeType":"161","messageId":"162","endLine":20,"endColumn":52},{"ruleId":"163","severity":1,"message":"164","line":53,"column":96,"nodeType":"165","messageId":"166","endLine":53,"endColumn":98},{"ruleId":"141","severity":1,"message":"167","line":1,"column":8,"nodeType":"143","messageId":"144","endLine":1,"endColumn":13},{"ruleId":"141","severity":1,"message":"156","line":2,"column":17,"nodeType":"143","messageId":"144","endLine":2,"endColumn":26},{"ruleId":"141","severity":1,"message":"142","line":5,"column":10,"nodeType":"143","messageId":"144","endLine":5,"endColumn":18},{"ruleId":"141","severity":1,"message":"168","line":5,"column":20,"nodeType":"143","messageId":"144","endLine":5,"endColumn":35},"no-native-reassign",["169"],"no-negated-in-lhs",["170"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'errorWrap'. Either include them or remove the dependency array.","ArrayExpression",["171"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["172"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["173"],"@typescript-eslint/no-unused-vars","'TaskType' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'actionsAuth' is defined but never used.","'Breadcrumb' is defined but never used.","'Footer' is assigned a value but never used.","'dispatch' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['Content-Type'] found.","Property","unnecessarilyComputedProperty",{"range":"174","text":"175"},["176"],"'useEffect' is defined but never used.","'UserType' is defined but never used.","'isTryStatement' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'style' is defined but never used.","'UpdatedTaskType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},{"desc":"181","fix":"182"},[220,236],"'Content-Type'",{"desc":"179","fix":"183"},"Update the dependencies array to be: [todoTaskError, todoError, authError, errorWrap, dispatch]",{"range":"184","text":"185"},"Update the dependencies array to be: [dispatch]",{"range":"186","text":"187"},"Update the dependencies array to be: [isAuthorized, user]",{"range":"188","text":"189"},{"range":"190","text":"187"},[1714,1751],"[todoTaskError, todoError, authError, errorWrap, dispatch]",[2039,2041],"[dispatch]",[2224,2238],"[isAuthorized, user]",[712,714]]