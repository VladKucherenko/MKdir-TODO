[{"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx":"1","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js":"2","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts":"3","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx":"4","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts":"5","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts":"6","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts":"7","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx":"8","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx":"9","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx":"10","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx":"11","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts":"12","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts":"13","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx":"14","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts":"15","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx":"16","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx":"17","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts":"18","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx":"19","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx":"20","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts":"21","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx":"22","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Sidebar.tsx":"23"},{"size":678,"mtime":1612462459249,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1612301873000,"results":"26","hashOfConfig":"25"},{"size":1138,"mtime":1612355823483,"results":"27","hashOfConfig":"25"},{"size":2758,"mtime":1612462450241,"results":"28","hashOfConfig":"25"},{"size":2438,"mtime":1612461126783,"results":"29","hashOfConfig":"25"},{"size":6036,"mtime":1612461255724,"results":"30","hashOfConfig":"25"},{"size":537,"mtime":1612461026222,"results":"31","hashOfConfig":"25"},{"size":2045,"mtime":1612475632218,"results":"32","hashOfConfig":"25"},{"size":1300,"mtime":1612478026153,"results":"33","hashOfConfig":"25"},{"size":135,"mtime":1612476681249,"results":"34","hashOfConfig":"25"},{"size":1738,"mtime":1612463336927,"results":"35","hashOfConfig":"25"},{"size":4132,"mtime":1612387984416,"results":"36","hashOfConfig":"25"},{"size":290,"mtime":1612460837630,"results":"37","hashOfConfig":"25"},{"size":1595,"mtime":1612478590092,"results":"38","hashOfConfig":"25"},{"size":589,"mtime":1612382351395,"results":"39","hashOfConfig":"25"},{"size":474,"mtime":1612477677176,"results":"40","hashOfConfig":"25"},{"size":3133,"mtime":1612482935548,"results":"41","hashOfConfig":"25"},{"size":6506,"mtime":1612461313826,"results":"42","hashOfConfig":"25"},{"size":896,"mtime":1612483516814,"results":"43","hashOfConfig":"25"},{"size":4922,"mtime":1612483822825,"results":"44","hashOfConfig":"25"},{"size":650,"mtime":1612382168368,"results":"45","hashOfConfig":"25"},{"size":1514,"mtime":1612456221678,"results":"46","hashOfConfig":"25"},{"size":2154,"mtime":1612463522386,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1jfjkih",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"50"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx",[],["102","103"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js",[],["104","105"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx",["106","107","108"],"import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { UserType } from './api/api';\nimport './App.scss';\nimport { LogInPage } from './components/Auth/LogIn/LogIn';\nimport { SignUpPage } from './components/Auth/SignUp/SignUp';\nimport { HeaderH } from './components/Common/Header/Header';\nimport { useMessage } from './components/Common/Hooks/message';\nimport { StarterPage } from './components/Common/Starter_page/StarterPage';\nimport { actionsAuth } from './redux/auth/auth-reducer';\nimport { getAuthMessage, getIsAuthorized, getUserInfo } from './redux/auth/auth-selectors';\nimport { getTodoMessage } from './redux/todo/todo-selectors';\nimport { getTodoTaskMessage } from './redux/todo-tasks/todoTask-selectors';\nimport 'antd/dist/antd.css';\nimport { actionsTodoTask } from './redux/todo-tasks/todoTask-reducer';\nimport { actionsTodo } from './redux/todo/todo-reducer';\n\nconst App = () => {\n  const isAuthorized = useSelector(getIsAuthorized)\n  const user = useSelector(getUserInfo)\n  const dispatch = useDispatch()\n  const errorWrap = useMessage()\n  const todoTaskError = useSelector(getTodoTaskMessage)\n  const todoError = useSelector(getTodoMessage)\n  const authError = useSelector(getAuthMessage)\n  useEffect(() => {\n    if ((todoTaskError || todoError || authError) === 'Your session time is run out'){\n        dispatch(actionsAuth.setIsAuthorized(false))\n        dispatch(actionsAuth.setUser(null))\n    }\n    errorWrap(todoTaskError || todoError || authError)\n    dispatch(actionsAuth.setErrors(null))\n    dispatch(actionsTodoTask.setErrors(null))\n    dispatch(actionsTodo.setErrors(null))\n  }, [todoTaskError, todoError, authError])\n\n  useEffect(() => {\n    let user: UserType\n    let isExist = localStorage.getItem('items')\n    if (isExist !== null) {\n      user = JSON.parse(isExist)\n      if (user) {\n        dispatch(actionsAuth.setUser(user))\n        dispatch(actionsAuth.setIsAuthorized(true))\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    \n    if (isAuthorized === true) {\n      localStorage.setItem('items', JSON.stringify(user))\n    } else {\n      localStorage.removeItem('items');\n    }\n  }, [isAuthorized])\n\n  return (\n    <div className=\"container\">\n      <HeaderH />\n      {isAuthorized\n        ? (<Switch>\n            <Route path='/start' exact render={() => <StarterPage />}></Route>\n            <Redirect to='/start' />\n        </Switch>)\n        : (<Switch>\n            <Route path='/login' exact render={() => <LogInPage />}></Route>\n            <Route path='/regist' exact render={() => <SignUpPage />}></Route>\n            <Redirect to='/login' />\n        </Switch>)\n      }\n    </div>\n  )\n\n}\n\nexport default App;\n\n\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts",["109"],"import { todoAPI } from './../../api/api';\nimport { ListType, TaskType } from '../../api/api';\nimport { AppStateType, BasicThunkType, InferActionsType } from '../redux-store';\n\nconst SET_LISTS = 'TDL/TODO-REDUCER/SET-LISTS';\nconst CREATE_LIST = 'TDL/TODO-REDUCER/CREATE-LIST';\nconst DELETE_LIST = 'TDL/TODO-REDUCER/DELETE-LIST';\nconst RENAME_LIST = 'TDL/TODO-REDUCER/RENAME-LIST';\nconst CHANGE_ORD = 'TDL/TODO-REDUCER/CHANGE-ORD';\nconst IS_FETCH = 'TDL/TODO-REDUCER/IS-FETCH';\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\n\nconst initialState = {\n    lists: [] as Array<ListType>,\n    isFetching: false,\n    message: null as null | string\n}\n\nconst toDoReducer = (state = initialState, action: actionsTodoType): InitialStateType => {\n\n    switch (action.type) {\n        case SET_LISTS: {\n            return {\n                ...state,\n                lists: action.lists\n            }\n        }\n        case CREATE_LIST: {\n            return {\n                ...state,\n                lists: [action.list, ...state.lists]\n            }\n        }\n        case DELETE_LIST: {\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.todolistId)\n            }\n        }\n        case RENAME_LIST: {\n            return {\n                ...state,\n                lists: state.lists.map(list => { if (list._id === action.todolistId) { return { ...list, title: action.title } } else return list })\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        case SETERROR: {\n            return {\n                ...state,\n                message: action.message\n            }\n        }\n        case CHANGE_ORD: {\n            let a, indexs = 0;\n            let array = state.lists;\n\n            array.forEach((elem, index) => {\n                if (elem._id === action.todolistId) {\n                    indexs = index;\n                }\n            })\n\n            a = array[indexs];\n            array[indexs] = array[indexs + 1];\n            array[indexs + 1] = a;\n            return {\n                ...state,\n                lists: array.map(item => { return item })\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\nexport const actionsTodo = {\n    setLists: (lists: Array<ListType>) => ({ type: SET_LISTS, lists } as const),\n    createList: (list: any) => ({ type: CREATE_LIST, list } as const),\n    deleteList: (todolistId: string) => ({ type: DELETE_LIST, todolistId } as const),\n    renameTitle: (todolistId: string, title: string) => ({ type: RENAME_LIST, todolistId, title } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const),\n    changeOrder: (todolistId: string, putAfterItemId: string) => ({ type: CHANGE_ORD, todolistId, putAfterItemId } as const)\n}\n\nexport const getLists = (): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.getToDoLists(getState().authR.user.token);\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setLists(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n\n}\n\nexport const postList = (title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.postToDoLists(title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.createList(response))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const deleteListThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.deleteToDoList(todolistId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.deleteList(todolistId))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\n\nexport const renameTitleThunk = (todolistId: string, title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.renameToDoList(todolistId, title, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.renameTitle(todolistId, title))\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n}\n\nexport const changeOrderThunk = (todolistId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actionsTodo.isFetching(true))\n        let response = await todoAPI.reorderToDoList(todolistId, putAfterItemId, getState().authR.user.token)\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.changeOrder(todolistId, putAfterItemId));\n        dispatch(actionsTodo.setErrors(response.message))\n    } catch (e) {\n        dispatch(actionsTodo.isFetching(false))\n        dispatch(actionsTodo.setErrors(e.response.data.message))\n    }\n\n}\n\nexport default toDoReducer;\n\nexport type InitialStateType = typeof initialState\ntype actionsTodoType = InferActionsType<typeof actionsTodo>\ntype ThunkType = BasicThunkType<actionsTodoType>\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx",["110"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx",["111"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx",["112","113","114","115"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { actionsAuth } from '../../../redux/auth/auth-reducer';\nimport { getIsAuthorized } from '../../../redux/auth/auth-selectors';\nimport { Sidebar } from './Sidebar';\nimport styles from './Header.module.scss';\nimport { Layout, Menu, Breadcrumb } from 'antd';\n\nconst { Header, Content, Footer } = Layout;\n\n\nexport const HeaderH = () => {\n    const isAuthorized = useSelector(getIsAuthorized)\n    const dispatch = useDispatch()\n\n    return (\n      //   <nav>\n      //   <div className={styles.nav_wrapper}>\n      //     <a href=\"#\" className=\"brand-logo\">MKdir</a>\n          \n      //     <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n      //       {isAuthorized \n      //       ? <li>< Sidebar /></li>\n      //       : <> <li><NavLink to='/login'>Log in</NavLink></li>\n      //         <li><NavLink to='/regist' >Sign up</NavLink></li></>\n      //       }\n      //     </ul>\n      //   </div>\n        \n      // </nav>\n      \n<Layout>\n    <Header>\n       \n      <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} >\n        <span className={styles.logo}>\n         <NavLink to='/' className={styles.logo_link}> MKdir </NavLink>\n        </span>\n        {isAuthorized \n            ? <Menu.Item style={{float: \"right\"}} key=\"1\">< Sidebar /></Menu.Item>\n            : <><Menu.Item style={{float: \"right\"}} key=\"2\"><NavLink to='/login'>Log in</NavLink></Menu.Item>\n              <Menu.Item style={{float: \"right\"}} key=\"3\"><NavLink to='/regist' >Sign up</NavLink></Menu.Item></>\n            }\n      </Menu>\n      <Content >\n      \n    </Content>\n    </Header>\n    \n  </Layout>)\n\n \n \n  \n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts",["116"],"import { LogInValuesType } from './../components/Auth/LogIn/LogIn';\n\nimport axios from 'axios'\nimport { SignUpValuesType } from '../components/Auth/SignUp/SignUp';\n\nconst instance = axios.create({\n    headers: {\n        ['Content-Type']: 'application/json'\n    }\n});\n\n\n\nexport const authAPI = {\n    logIn(user: LogInValuesType) {\n        return instance.post(`/api/auth/login`, user)\n            .then(response => response.data)\n    },\n    signUp(user: SignUpValuesType) {\n        return instance.post(`/api/auth/register`, user)\n            .then(response => response.data)\n    }\n}\nexport const todoAPI = {\n    getToDoLists(token: string) {\n        return instance.get(`/api/todo/lists`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postToDoLists(title: string, token: string) {\n        return instance.post(`/api/todo/lists`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    renameToDoList(todolistId: string, title: string, token: string) {\n        return instance.put(`/api/todo/lists/${todolistId}`, { title }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteToDoList(todolistId: string, token: string) {\n        return instance.delete(`/api/todo/lists/${todolistId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    reorderToDoList(todolistId: string, putAfterItemId: string, token: string) {\n\n        return instance.put(`/api/todo/lists/${todolistId}/reorder`, { putAfterItemId }, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport const tasksAPI = {\n    getTasks(todolistId: string, token: string){\n        return instance.get(`/api/tasks/${todolistId}/tasks`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    postTasks(todolistId: string, title: string, token: string){\n        return instance.post(`/api/tasks/${todolistId}/tasks`, {title}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data)\n    },\n    deleteTasks(todolistId: string, taskId: string, token: string){\n        return instance.delete(`/api/tasks/${todolistId}/tasks/${taskId}`, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    updateTasks(todolistId: string, taskId: string, updateTask: UpdatedTaskType, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}`, updateTask, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    },\n    reorderTasks(todolistId: string, taskId: string, putAfterItemId: string, token: string){\n        return instance.put(`/api/tasks/${todolistId}/tasks/${taskId}/reorder`, {putAfterItemId}, {\n            headers: {\n                authorization: `Bearer ${token}`\n            }\n        })\n            .then(response => response.data);\n    }\n}\n\nexport type UpdatedTaskType = {\n    title: string,\n    completed: boolean,\n    deadline: Date,\n    description: string\n}\n\nexport type TaskType = {\n    _id: string,\n    description: String,\n    title:  string,\n    // priority: Number,\n    completed: boolean,\n    startDate: Date,\n    deadline: string,\n    order: number,\n    listId: string,\n}\n\nexport type UserType = {\n    firstName: null | string,\n    lastName: null | string,\n    token: null | string\n}\n\nexport type ListType = {\n    _id: string,\n    title: string,\n    addedDate: Date,\n    order: number,\n    tasks: Array<any>  ////????any\n}\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx",["117","118"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx",["119"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx",["120","121"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts",["122"],"// import { tasksAPI, toDoAPI } from \"../api/api\";\r\n\r\nimport { isTryStatement } from \"typescript\"\r\nimport { tasksAPI, TaskType, UpdatedTaskType } from \"../../api/api\"\r\nimport { AppStateType, BasicThunkType, InferActionsType } from \"../redux-store\"\r\n\r\nconst GET_TASKS = 'GET-TASKS'\r\nconst POST_TASK = 'POST-TASK'\r\nconst DEL_TASK = 'DEL_TASK'\r\nconst UPDATE_TASK = 'UPDATE-TASK'\r\nconst REORDER_TASK = 'REORDER-TASK'\r\nconst IS_FETCH = 'IS-FETCH';\r\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\r\n\r\nconst initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    default: {\r\n        description: 'no desc',\r\n        completed: false,\r\n        status: 0,\r\n        priority: 1,\r\n        startDate: '2020',\r\n        deadline: 'today'\r\n    },\r\n    isFetching: false,\r\n    message: null as null | string\r\n}\r\n\r\nexport const toDoTasksReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        }\r\n        case POST_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [action.taskItem, ...state.tasks]\r\n            }\r\n        }\r\n        case IS_FETCH: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.bool\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(elem => elem._id !== action.taskId)\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if (task._id === action.taskId) {\r\n                        return action.item;\r\n                    }\r\n                    else return task;\r\n                })\r\n            }\r\n        }\r\n        case REORDER_TASK: {\r\n            let a, indexs = 0;\r\n            let array = state.tasks;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem._id === action.taskId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n\r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;\r\n            return {\r\n                ...state,\r\n                tasks: array.map(item => { return item })\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actionsTodoTask = {\r\n    getTasks: (tasks: Array<TaskType>) => ({ type: GET_TASKS, tasks } as const),\r\n    postTasks: (taskItem: TaskType) => ({ type: POST_TASK, taskItem } as const),\r\n    deleteTask: (taskId: string) => ({ type: DEL_TASK, taskId } as const),\r\n    updateTask: (taskId: string, item: any) => ({ type: UPDATE_TASK, taskId, item } as const),\r\n    reorderTask: (taskId: string) => ({ type: REORDER_TASK, taskId } as const),\r\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\r\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const)\r\n\r\n}\r\n\r\n\r\nexport const getTasksThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.getTasks(todolistId, getState().authR.user.token)\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.getTasks(response))\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const postTasksThunk = (todolistId: string, newTaskTitle: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.postTasks(todolistId, newTaskTitle, getState().authR.user.token);\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.postTasks(response));\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const deleteTaskThunk = (todolistId: string, taskId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.deleteTasks(todolistId, taskId, getState().authR.user.token);\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.deleteTask(taskId));\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const updateTaskThunk = (\r\n    todolistId: string,\r\n    taskId: string,\r\n    updatedTaskObject: UpdatedTaskType): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(actionsTodoTask.isFetching(true))\r\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject, getState().authR.user.token);\r\n            dispatch(actionsTodoTask.isFetching(false))\r\n            dispatch(actionsTodoTask.updateTask(taskId, response.updatedTask))\r\n            dispatch(actionsTodoTask.setErrors(response.message))\r\n        } catch (e) {\r\n            dispatch(actionsTodoTask.isFetching(false))\r\n            dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n        }\r\n    }\r\n\r\nexport const reorderTaskThunk = (todolistId: string, taskId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    \r\n    try{\r\n        dispatch(actionsTodoTask.isFetching(true))\r\n        let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId, getState().authR.user.token)\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(response.message))\r\n    }catch(e){\r\n        dispatch(actionsTodoTask.isFetching(false))\r\n        dispatch(actionsTodoTask.setErrors(e.response.data.message))\r\n    }\r\n    \r\n    dispatch(actionsTodoTask.reorderTask(taskId));\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actionsTodoTask>\r\ntype ThunkType = BasicThunkType<ActionsType>","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx",["123"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx",["124","125","126","127"],"import style from './Tasks.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport { TaskType, UpdatedTaskType } from '../../../api/api';\r\n\r\ntype PropsType = {\r\n    listId: string,\r\n    task: any,\r\n    taskId: string\r\n}\r\nconst Description: React.FC<PropsType> = props => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTaskId, changeChoosedTaskId ] = useState('');\r\n    let [newDesc, changeNewDesc] = useState(props.task.description);\r\n    const dispatch = useDispatch()\r\n\r\n    let turnEditMode = () => {\r\n        changeEditMode(!editMode);\r\n        changeChoosedTaskId(props.taskId);\r\n    }\r\n\r\n    let onChangeDesc = (newText: string) => {\r\n        changeNewDesc(newText);\r\n    }\r\n    let updateDesc = (task: any) => {\r\n        changeEditMode(!editMode);\r\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, description: newDesc}))\r\n        debugger\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            {(editMode && choosedTaskId === props.taskId)\r\n            ? <textarea onBlur={() => updateDesc(props.task)} onChange={(e) => onChangeDesc(e.currentTarget.value)} autoFocus={true} value={newDesc}></textarea>\r\n            :<span onDoubleClick={turnEditMode}>{props.task.description}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nconst DescriptionMemoization = React.memo(Description)\r\nexport default DescriptionMemoization","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Sidebar.tsx",[],{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"128","replacedBy":"129"},{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","severity":1,"message":"133","line":36,"column":6,"nodeType":"134","endLine":36,"endColumn":43,"suggestions":"135"},{"ruleId":"132","severity":1,"message":"136","line":48,"column":6,"nodeType":"134","endLine":48,"endColumn":8,"suggestions":"137"},{"ruleId":"132","severity":1,"message":"138","line":57,"column":6,"nodeType":"134","endLine":57,"endColumn":20,"suggestions":"139"},{"ruleId":"140","severity":1,"message":"141","line":2,"column":20,"nodeType":"142","messageId":"143","endLine":2,"endColumn":28},{"ruleId":"140","severity":1,"message":"144","line":22,"column":7,"nodeType":"142","messageId":"143","endLine":22,"endColumn":15},{"ruleId":"140","severity":1,"message":"145","line":6,"column":10,"nodeType":"142","messageId":"143","endLine":6,"endColumn":19},{"ruleId":"140","severity":1,"message":"146","line":4,"column":10,"nodeType":"142","messageId":"143","endLine":4,"endColumn":21},{"ruleId":"140","severity":1,"message":"147","line":8,"column":24,"nodeType":"142","messageId":"143","endLine":8,"endColumn":34},{"ruleId":"140","severity":1,"message":"148","line":10,"column":26,"nodeType":"142","messageId":"143","endLine":10,"endColumn":32},{"ruleId":"140","severity":1,"message":"149","line":15,"column":11,"nodeType":"142","messageId":"143","endLine":15,"endColumn":19},{"ruleId":"150","severity":1,"message":"151","line":8,"column":9,"nodeType":"152","messageId":"153","endLine":8,"endColumn":45,"fix":"154"},{"ruleId":"140","severity":1,"message":"155","line":1,"column":28,"nodeType":"142","messageId":"143","endLine":1,"endColumn":36},{"ruleId":"132","severity":1,"message":"136","line":19,"column":8,"nodeType":"134","endLine":19,"endColumn":10,"suggestions":"156"},{"ruleId":"140","severity":1,"message":"157","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":14},{"ruleId":"140","severity":1,"message":"158","line":2,"column":17,"nodeType":"142","messageId":"143","endLine":2,"endColumn":26},{"ruleId":"140","severity":1,"message":"159","line":5,"column":20,"nodeType":"142","messageId":"143","endLine":5,"endColumn":28},{"ruleId":"140","severity":1,"message":"160","line":3,"column":10,"nodeType":"142","messageId":"143","endLine":3,"endColumn":24},{"ruleId":"161","severity":1,"message":"162","line":57,"column":96,"nodeType":"163","messageId":"164","endLine":57,"endColumn":98},{"ruleId":"140","severity":1,"message":"165","line":1,"column":8,"nodeType":"142","messageId":"143","endLine":1,"endColumn":13},{"ruleId":"140","severity":1,"message":"158","line":2,"column":17,"nodeType":"142","messageId":"143","endLine":2,"endColumn":26},{"ruleId":"140","severity":1,"message":"141","line":5,"column":10,"nodeType":"142","messageId":"143","endLine":5,"endColumn":18},{"ruleId":"140","severity":1,"message":"166","line":5,"column":20,"nodeType":"142","messageId":"143","endLine":5,"endColumn":35},"no-native-reassign",["167"],"no-negated-in-lhs",["168"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'errorWrap'. Either include them or remove the dependency array.","ArrayExpression",["169"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["170"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["171"],"@typescript-eslint/no-unused-vars","'TaskType' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'Preloader' is defined but never used.","'actionsAuth' is defined but never used.","'Breadcrumb' is defined but never used.","'Footer' is assigned a value but never used.","'dispatch' is assigned a value but never used.","no-useless-computed-key","Unnecessarily computed property ['Content-Type'] found.","Property","unnecessarilyComputedProperty",{"range":"172","text":"173"},"'useState' is defined but never used.",["174"],"'styles' is defined but never used.","'useEffect' is defined but never used.","'UserType' is defined but never used.","'isTryStatement' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'style' is defined but never used.","'UpdatedTaskType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"175","fix":"176"},{"desc":"177","fix":"178"},{"desc":"179","fix":"180"},[220,236],"'Content-Type'",{"desc":"177","fix":"181"},"Update the dependencies array to be: [todoTaskError, todoError, authError, errorWrap, dispatch]",{"range":"182","text":"183"},"Update the dependencies array to be: [dispatch]",{"range":"184","text":"185"},"Update the dependencies array to be: [isAuthorized, user]",{"range":"186","text":"187"},{"range":"188","text":"185"},[1714,1751],"[todoTaskError, todoError, authError, errorWrap, dispatch]",[2039,2041],"[dispatch]",[2224,2238],"[isAuthorized, user]",[645,647]]