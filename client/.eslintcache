[{"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx":"1","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js":"2","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts":"3","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx":"4","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts":"5","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts":"6","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts":"7","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx":"8","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx":"9","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx":"10","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx":"11","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts":"12","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts":"13","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx":"14","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts":"15","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx":"16","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx":"17","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts":"18","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx":"19","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx":"20","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts":"21","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx":"22"},{"size":677,"mtime":1612301873000,"results":"23","hashOfConfig":"24"},{"size":362,"mtime":1612301873000,"results":"25","hashOfConfig":"24"},{"size":1138,"mtime":1612355823483,"results":"26","hashOfConfig":"24"},{"size":2330,"mtime":1612386673405,"results":"27","hashOfConfig":"24"},{"size":2382,"mtime":1612387950586,"results":"28","hashOfConfig":"24"},{"size":5896,"mtime":1612376801739,"results":"29","hashOfConfig":"24"},{"size":537,"mtime":1612382182875,"results":"30","hashOfConfig":"24"},{"size":2061,"mtime":1612382306691,"results":"31","hashOfConfig":"24"},{"size":1092,"mtime":1612382324928,"results":"32","hashOfConfig":"24"},{"size":173,"mtime":1612345647016,"results":"33","hashOfConfig":"24"},{"size":967,"mtime":1612301873000,"results":"34","hashOfConfig":"24"},{"size":4132,"mtime":1612387984416,"results":"35","hashOfConfig":"24"},{"size":241,"mtime":1612301873000,"results":"36","hashOfConfig":"24"},{"size":1479,"mtime":1612382022571,"results":"37","hashOfConfig":"24"},{"size":589,"mtime":1612382351395,"results":"38","hashOfConfig":"24"},{"size":563,"mtime":1612345534635,"results":"39","hashOfConfig":"24"},{"size":2839,"mtime":1612376077839,"results":"40","hashOfConfig":"24"},{"size":6250,"mtime":1612381856899,"results":"41","hashOfConfig":"24"},{"size":979,"mtime":1612371040155,"results":"42","hashOfConfig":"24"},{"size":4186,"mtime":1612381736402,"results":"43","hashOfConfig":"24"},{"size":650,"mtime":1612382168368,"results":"44","hashOfConfig":"24"},{"size":1514,"mtime":1612380716054,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1jfjkih",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"48"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"48"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"48"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"48"},"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx",[],["101","102"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js",[],["103","104"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx",["105","106","107"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts",["108"],"import { todoAPI } from './../../api/api';\nimport { ListType, TaskType } from '../../api/api';\nimport { AppStateType, BasicThunkType, InferActionsType } from '../redux-store';\n\nconst SET_LISTS = 'TDL/TODO-REDUCER/SET-LISTS';\nconst CREATE_LIST = 'TDL/TODO-REDUCER/CREATE-LIST';\nconst DELETE_LIST = 'TDL/TODO-REDUCER/DELETE-LIST';\nconst RENAME_LIST = 'TDL/TODO-REDUCER/RENAME-LIST';\nconst CHANGE_ORD = 'TDL/TODO-REDUCER/CHANGE-ORD';\nconst IS_FETCH = 'TDL/TODO-REDUCER/IS-FETCH';\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\n\nconst initialState = {\n    lists: [] as Array<ListType>,\n    isFetching: false,\n    message: null as null | string\n}\n\nconst toDoReducer = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case SET_LISTS: {\n            return {\n                ...state,\n                lists: action.lists\n            }\n        }\n        case CREATE_LIST: {\n            return {\n                ...state,\n                lists: [action.list, ...state.lists]\n            }\n        }\n        case DELETE_LIST: {\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.todolistId)\n            }\n        }\n        case RENAME_LIST: {\n            return {\n                ...state,\n                lists: state.lists.map(list => { if (list._id === action.todolistId) { return { ...list, title: action.title } } else return list })\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        case SETERROR: {\n            return {\n                ...state,\n                message: action.message\n            }\n        }\n        case CHANGE_ORD: {\n            let a, indexs = 0;\n            let array = state.lists;\n\n            array.forEach((elem, index) => {\n                if (elem._id === action.todolistId) {\n                    indexs = index;\n                }\n            })\n\n            a = array[indexs];\n            array[indexs] = array[indexs + 1];\n            array[indexs + 1] = a;\n            return {\n                ...state,\n                lists: array.map(item => { return item })\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\nexport const actions = {\n    setLists: (lists: Array<ListType>) => ({ type: SET_LISTS, lists } as const),\n    createList: (list: any) => ({ type: CREATE_LIST, list } as const),\n    deleteList: (todolistId: string) => ({ type: DELETE_LIST, todolistId } as const),\n    renameTitle: (todolistId: string, title: string) => ({ type: RENAME_LIST, todolistId, title } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const),\n    changeOrder: (todolistId: string, putAfterItemId: string) => ({ type: CHANGE_ORD, todolistId, putAfterItemId } as const)\n}\n\nexport const getLists = (): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actions.isFetching(true))\n        let response = await todoAPI.getToDoLists(getState().authR.user.token);\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setLists(response))\n        dispatch(actions.setErrors(response.message))\n    } catch (e) {\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setErrors(e.response.data.message))\n    }\n\n\n}\n\nexport const postList = (title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n\n    try {\n        dispatch(actions.isFetching(true))\n        let response = await todoAPI.postToDoLists(title, getState().authR.user.token)\n        dispatch(actions.isFetching(false))\n        dispatch(actions.createList(response))\n        dispatch(actions.setErrors(response.message))\n    } catch (e) {\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setErrors(e.response.data.message))\n    }\n}\n\nexport const deleteListThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actions.isFetching(true))\n        let response = await todoAPI.deleteToDoList(todolistId, getState().authR.user.token)\n        dispatch(actions.isFetching(false))\n        dispatch(actions.deleteList(todolistId))\n        dispatch(actions.setErrors(response.message))\n    } catch (e) {\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setErrors(e.response.data.message))\n    }\n\n}\n\n\nexport const renameTitleThunk = (todolistId: string, title: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actions.isFetching(true))\n        let response = await todoAPI.renameToDoList(todolistId, title, getState().authR.user.token)\n        dispatch(actions.isFetching(false))\n        dispatch(actions.renameTitle(todolistId, title))\n        dispatch(actions.setErrors(response.message))\n    } catch (e) {\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setErrors(e.response.data.message))\n    }\n}\n\nexport const changeOrderThunk = (todolistId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\n    try {\n        dispatch(actions.isFetching(true))\n        let response = await todoAPI.reorderToDoList(todolistId, putAfterItemId, getState().authR.user.token)\n        dispatch(actions.isFetching(false))\n        dispatch(actions.changeOrder(todolistId, putAfterItemId));\n        dispatch(actions.setErrors(response.message))\n    } catch (e) {\n        dispatch(actions.isFetching(false))\n        dispatch(actions.setErrors(e.response.data.message))\n    }\n\n}\n\nexport default toDoReducer;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BasicThunkType<ActionsType>\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx",["109"],"import { Formik } from \"formik\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport { signUpThunk } from \"../../../redux/auth/auth-reducer\"\nimport { getAuthMessage } from \"../../../redux/auth/auth-selectors\"\ntype PropsType = {\n    \n}\n\nexport const SignUpPage: React.FC<PropsType> = () => {\n  \n  const dispatch = useDispatch()\n  const history = useHistory()\n  const errors = useSelector(getAuthMessage)\n  \n    const submitHandler = async (values: SignUpValuesType, actions: any) => {\n      let response: any\n      if(values){\n        response = await dispatch(signUpThunk(values))\n        !errors && history.push('/login')\n      }\n    }\n    \n    return (<div>\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: ''\n            }}\n            onSubmit={submitHandler}\n        >\n       {props => (\n         <form onSubmit={props.handleSubmit}>\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='First name'\n             name=\"firstName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Last name'\n             name=\"lastName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Email'\n             name=\"email\"\n           />\n           <input\n             type=\"password\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Password'\n             name=\"password\"\n           />\n           \n           <button type=\"submit\">Submit</button>\n         </form> \n       )}\n     </Formik>\n    </div>)\n}\n\nexport type SignUpValuesType = {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx",["110"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { actions } from '../../../redux/auth/auth-reducer';\nimport { getIsAuthorized } from '../../../redux/auth/auth-selectors';\n\nexport const Header = () => {\n    const isAuthorized = useSelector(getIsAuthorized)\n    const dispatch = useDispatch()\n\n    const onLogOut = () => {\n        dispatch(actions.setIsAuthorized(false))\n    }\n\n    return (\n        <nav>\n        <div className=\"nav-wrapper\">\n          <a href=\"#\" className=\"brand-logo\">MKdir</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            {isAuthorized \n            ? <li><NavLink to='/logout' onClick={onLogOut}>Logout</NavLink></li>\n            : <> <li><NavLink to='/login'>Log in</NavLink></li>\n              <li><NavLink to='/regist' >Sign up</NavLink></li></>\n            }\n          </ul>\n        </div>\n        \n      </nav>\n    );\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts",["111"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Lists.tsx",["112"],"import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists, postList } from '../../redux/todo/todo-reducer';\r\nimport { getIsFetching } from '../../redux/todo/todo-selectors';\r\nimport { Preloader } from '../Common/Preloader/Preloader';\r\nimport List from './List';\r\nimport style from './Lists.module.css';\r\n// import List from './List';\r\n// import Preloader from '../Common/Preloader';\r\n\r\nconst Lists = React.memo(props => {\r\n\r\n    let [newTitle, changeNewTitle] = useState('');\r\n    const isFetching = useSelector(getIsFetching)\r\n    const dispatch = useDispatch()\r\n    \r\n    useEffect(() => {\r\n        \r\n        dispatch(getLists());\r\n    }, []);\r\n    \r\n    let onTitleChangeText = (text: string) => {\r\n        changeNewTitle(text);\r\n    }\r\n\r\n    let addTitle = () => {\r\n        dispatch(postList(newTitle));\r\n        changeNewTitle('');\r\n    }\r\n\r\n    return (<div>\r\n\r\n        <div className={style.newTitle}>\r\n            <span className={style.textTitle}>\r\n                Enter new title\r\n            </span>\r\n            <div>\r\n                <textarea value={newTitle} onChange={(e) => onTitleChangeText(e.currentTarget.value)}/>\r\n                <input onClick={addTitle} type=\"button\" value=\"Create\" />\r\n            </div>\r\n\r\n        </div>\r\n        {isFetching && <Preloader/>}\r\n        <div className={style.content}>\r\n            <List />\r\n        </div>\r\n\r\n    </div>)\r\n});\r\n\r\nexport default Lists;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Preloader\\Preloader.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\List.tsx",["113","114"],"import style from './Lists.module.css';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getLists } from '../../redux/todo/todo-selectors';\r\nimport { ListType, UserType } from '../../api/api';\r\nimport { changeOrderThunk, deleteListThunk, renameTitleThunk } from '../../redux/todo/todo-reducer';\r\nimport Tasks from './Task/Tasks';\r\n\r\n\r\nconst List: React.FC<any> = (props) => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTitle, changeTitle] = useState('');\r\n    let [newTitleText, changeNewTitleText] = useState('');\r\n    const dispatch = useDispatch()\r\n    const lists = useSelector(getLists)\r\n\r\n\r\n    let deleteList = (todolistId: string) => {\r\n        dispatch(deleteListThunk(todolistId));\r\n    }\r\n\r\n    let updateTitle = () => {\r\n        //thunk\r\n        dispatch(renameTitleThunk(choosedTitle, newTitleText));\r\n        changeEditMode(false);\r\n        changeNewTitleText('');\r\n    }\r\n\r\n    let activateEditMode = (text: string, id: string) => {\r\n        changeTitle(id);\r\n        changeNewTitleText(text);\r\n        changeEditMode(true);\r\n    }\r\n    let changeOrder = (todolistId: string, putAfterItemId: string) => {\r\n        dispatch(changeOrderThunk(todolistId, putAfterItemId));\r\n    }\r\n\r\n    let listsArray = lists && lists.map((list: ListType, index: number, array: Array<ListType>) => {\r\n        let date = new Date(list.addedDate)\r\n        return (<div key={list._id} className={style.listUI}>\r\n            <div className={style.title}>\r\n                <span>\r\n                    {(editMode && list._id === choosedTitle)\r\n                        ? <input onBlur={updateTitle} autoFocus={true} onChange={(e) => changeNewTitleText(e.currentTarget.value)} value={newTitleText}></input>\r\n                        : <span onDoubleClick={() => activateEditMode(list.title, list._id)}>{list.title}</span>\r\n                    }\r\n                </span>\r\n                <span onClick={() => deleteList(list._id)} className={style.delTitle}>\r\n                    X\r\n                </span>\r\n            </div>\r\n            <div className={style.tasks}>\r\n                <div>\r\n                    <Tasks listId={list._id}/>\r\n                </div>\r\n            </div>\r\n            <div> \r\n                {index < array.length-1 && <input onClick={() => changeOrder(array[index]._id, array[index+1]._id)} type=\"button\" value='-'/> }\r\n                {index > 0 && <input onClick={() => changeOrder(array[index-1]._id, array[index]._id)} type=\"button\" value='+'/> }\r\n             </div>\r\n             <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\r\n        </div>);\r\n    });\r\n\r\n    return (<>\r\n        {listsArray}\r\n    </>);\r\n}\r\nexport default List;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-reducer.ts",["115"],"// import { tasksAPI, toDoAPI } from \"../api/api\";\r\n\r\nimport { isTryStatement } from \"typescript\"\r\nimport { tasksAPI, TaskType, UpdatedTaskType } from \"../../api/api\"\r\nimport { AppStateType, BasicThunkType, InferActionsType } from \"../redux-store\"\r\n\r\nconst GET_TASKS = 'GET-TASKS'\r\nconst POST_TASK = 'POST-TASK'\r\nconst DEL_TASK = 'DEL_TASK'\r\nconst UPDATE_TASK = 'UPDATE-TASK'\r\nconst REORDER_TASK = 'REORDER-TASK'\r\nconst IS_FETCH = 'IS-FETCH';\r\nconst SETERROR = 'TDL/TODO-REDUCER/SET-ERROR'\r\n\r\nconst initialState = {\r\n    tasks: [] as Array<TaskType>,\r\n    default: {\r\n        description: 'no desc',\r\n        completed: false,\r\n        status: 0,\r\n        priority: 1,\r\n        startDate: '2020',\r\n        deadline: 'today'\r\n    },\r\n    isFetching: false,\r\n    message: null as null | string\r\n}\r\n\r\nexport const toDoTasksReducer = (state = initialState, action: any) => {\r\n\r\n    switch (action.type) {\r\n        case GET_TASKS: {\r\n            return {\r\n                ...state,\r\n                tasks: action.tasks\r\n            }\r\n        }\r\n        case POST_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: [action.taskItem, ...state.tasks]\r\n            }\r\n        }\r\n        case IS_FETCH: {\r\n            return {\r\n                ...state,\r\n                isFetching: action.bool\r\n            }\r\n        }\r\n        case DEL_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.filter(elem => elem._id !== action.taskId)\r\n            }\r\n        }\r\n        case UPDATE_TASK: {\r\n            return {\r\n                ...state,\r\n                tasks: state.tasks.map(task => {\r\n                    if (task._id === action.taskId) {\r\n                        return action.item;\r\n                    }\r\n                    else return task;\r\n                })\r\n            }\r\n        }\r\n        case REORDER_TASK: {\r\n            let a, indexs = 0;\r\n            let array = state.tasks;\r\n\r\n            array.forEach((elem, index) => {\r\n                if (elem._id === action.taskId) {\r\n                    indexs = index;\r\n                }\r\n            })\r\n\r\n            a = array[indexs];\r\n            array[indexs] = array[indexs + 1];\r\n            array[indexs + 1] = a;\r\n            return {\r\n                ...state,\r\n                tasks: array.map(item => { return item })\r\n            }\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    getTasks: (tasks: Array<TaskType>) => ({ type: GET_TASKS, tasks } as const),\r\n    postTasks: (taskItem: TaskType) => ({ type: POST_TASK, taskItem } as const),\r\n    deleteTask: (taskId: string) => ({ type: DEL_TASK, taskId } as const),\r\n    updateTask: (taskId: string, item: any) => ({ type: UPDATE_TASK, taskId, item } as const),\r\n    reorderTask: (taskId: string) => ({ type: REORDER_TASK, taskId } as const),\r\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\r\n    setErrors: (message: null | string) => ({ type: SETERROR, message } as const)\r\n\r\n}\r\n\r\n\r\nexport const getTasksThunk = (todolistId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actions.isFetching(true))\r\n        let response = await tasksAPI.getTasks(todolistId, getState().authR.user.token)\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.getTasks(response))\r\n        dispatch(actions.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const postTasksThunk = (todolistId: string, newTaskTitle: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actions.isFetching(true))\r\n        let response = await tasksAPI.postTasks(todolistId, newTaskTitle, getState().authR.user.token);\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.postTasks(response));\r\n        dispatch(actions.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const deleteTaskThunk = (todolistId: string, taskId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    try {\r\n        dispatch(actions.isFetching(true))\r\n        let response = await tasksAPI.deleteTasks(todolistId, taskId, getState().authR.user.token);\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.deleteTask(taskId));\r\n        dispatch(actions.setErrors(response.message))\r\n    } catch (e) {\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.setErrors(e.response.data.message))\r\n    }\r\n}\r\n\r\nexport const updateTaskThunk = (\r\n    todolistId: string,\r\n    taskId: string,\r\n    updatedTaskObject: UpdatedTaskType): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n        try {\r\n            dispatch(actions.isFetching(true))\r\n            let response = await tasksAPI.updateTasks(todolistId, taskId, updatedTaskObject, getState().authR.user.token);\r\n            dispatch(actions.isFetching(false))\r\n            dispatch(actions.updateTask(taskId, response.updatedTask))\r\n            dispatch(actions.setErrors(response.message))\r\n        } catch (e) {\r\n            dispatch(actions.isFetching(false))\r\n            dispatch(actions.setErrors(e.response.data.message))\r\n        }\r\n    }\r\n\r\nexport const reorderTaskThunk = (todolistId: string, taskId: string, putAfterItemId: string): ThunkType => async (dispatch, getState: () => AppStateType) => {\r\n    \r\n    try{\r\n        dispatch(actions.isFetching(true))\r\n        let response = await tasksAPI.reorderTasks(todolistId, taskId, putAfterItemId, getState().authR.user.token)\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.setErrors(response.message))\r\n    }catch(e){\r\n        dispatch(actions.isFetching(false))\r\n        dispatch(actions.setErrors(e.response.data.message))\r\n    }\r\n    \r\n    dispatch(actions.reorderTask(taskId));\r\n}\r\n\r\nexport type InitialStateType = typeof initialState\r\ntype ActionsType = InferActionsType<typeof actions>\r\ntype ThunkType = BasicThunkType<ActionsType>","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Tasks.tsx",["116","117"],"import style from './Tasks.module.css';\r\nimport React, { useState } from 'react';\r\nimport Task from './Task';\r\nimport arrowDown from './../../../assets/arrowDown.png';\r\nimport { useDispatch } from 'react-redux';\r\nimport { getTasksThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\ntype PropsType = {\r\n    listId: string\r\n}\r\n\r\nconst Tasks: React.FC<PropsType> = React.memo(props => {\r\n\r\n    let [viewMode, changeViewMode] = useState(false);\r\n    const dispatch = useDispatch()\r\n    \r\n    let viewTasks = (listId: string) => {\r\n        changeViewMode(!viewMode);\r\n        dispatch(getTasksThunk(listId))\r\n        \r\n    }\r\n{/* <img src={arrowDown} alt='arrowDown'></img> */}\r\n \r\n    return (\r\n        <div>\r\n            <span  className={style.viewTasks} onClick={() => viewTasks(props.listId)}> + </span>\r\n            {viewMode && <div>\r\n                <Task listId={props.listId}  />\r\n            </div>}\r\n            \r\n        </div>\r\n    );\r\n});\r\nexport default Tasks;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Task.tsx",["118"],"import React, { useState } from 'react';\r\nimport Description from './Description';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getTasks } from '../../../redux/todo-tasks/todoTask-selectors';\r\nimport style from './Tasks.module.css';\r\nimport { deleteTaskThunk, postTasksThunk, reorderTaskThunk, updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport { TaskType } from '../../../api/api';\r\n\r\ntype PropsType = {\r\n    listId: string\r\n}\r\n\r\nconst Task: React.FC<PropsType> = React.memo(props => {\r\n\r\n    const dispatch = useDispatch()\r\n    const tasks = useSelector(getTasks)\r\n    let [newTaskTitle, changeNewTask] = useState('');\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [TaskText, changeTaskText] = useState('');\r\n    let [choosedTask, changeChoosedTask] = useState('');\r\n\r\n\r\n    let deleteTask = (taskId: string) => {\r\n        dispatch(deleteTaskThunk(props.listId, taskId))\r\n    }\r\n\r\n    let setTaskText = (text: string) => {\r\n        changeTaskText(text);\r\n    }\r\n\r\n    let setStatusModeTrue = (text: string, taskId: string) => {\r\n        changeChoosedTask(taskId)\r\n        changeTaskText(text);\r\n        changeEditMode(!editMode);\r\n    }\r\n\r\n\r\n    let changeOrderTasks = (taskId: string, putAfterItemId: string) => {\r\n        dispatch(reorderTaskThunk(props.listId, taskId, putAfterItemId))\r\n    }\r\n\r\n    \r\n    let setStatusModeFalse = (task: any) => {\r\n        changeEditMode(!editMode);\r\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, title:TaskText}))\r\n    }\r\n    let changeCheckBox = (bool: boolean, task: any) => {\r\n        let intBool = Number(bool);\r\n        dispatch(updateTaskThunk(props.listId, task.id, {...task, completed: intBool }))\r\n    }\r\n\r\n    let taskArray = tasks && tasks.map((task: TaskType, index: number, array: Array<TaskType>) => {\r\n        if (task.listId === props.listId) {\r\n            let date = new Date(task.startDate)\r\n            return <div key={task._id} className={style.taskItem}>\r\n                <div>\r\n                    {(editMode && choosedTask === task._id)\r\n                        ? <input autoFocus={true} onBlur={() => setStatusModeFalse(task)} onChange={(e) => setTaskText(e.currentTarget.value)} type=\"text\" value={TaskText} />\r\n                        : <span onDoubleClick={() => setStatusModeTrue(task.title, task._id)}>{task.title}</span>\r\n                    }\r\n                    <span onClick={() => deleteTask(task._id)} className={style.delete}>X</span> \r\n                    <input checked={task.completed} //CHECKBOX\r\n                        onChange={(e) => changeCheckBox(e.currentTarget.checked, task)}\r\n                        className={style.complete}\r\n                        type='checkbox'>\r\n\r\n                    </input>\r\n                    <div>\r\n                        <Description\r\n                            task={task}\r\n                            taskId={task._id}\r\n                            listId={props.listId} />\r\n                    </div>\r\n                    <div className={style.date}>{date.toDateString() + ' ' + date.getHours() + ':' + date.getMinutes() + ':' + date.getSeconds()}</div>\r\n                    <div>\r\n                        {index < array.length - 1 && <input onClick={() => changeOrderTasks(array[index]._id, array[index + 1]._id)} type=\"button\" value='-' />}\r\n                        {index > 0 && <input onClick={() => changeOrderTasks(array[index - 1]._id, array[index]._id)} type=\"button\" value='+' />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        }\r\n    });\r\n\r\n    let onTaskChangeText = (text: string) => {\r\n        changeNewTask(text);\r\n    }\r\n\r\n    let addTask = () => {\r\n\r\n        dispatch(postTasksThunk(props.listId, newTaskTitle))\r\n        changeNewTask('');\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div>\r\n                <textarea value={newTaskTitle} onChange={(e) => onTaskChangeText(e.currentTarget.value)} />\r\n                <input onClick={addTask} type=\"button\" value=\"Add\" />\r\n            </div>\r\n            <div>\r\n                {taskArray}\r\n            </div>\r\n\r\n\r\n        </div>\r\n    );\r\n});\r\nexport default Task;","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo-tasks\\todoTask-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\ToDo\\Task\\Description.tsx",["119","120","121","122"],"import style from './Tasks.module.scss';\r\nimport React, { useEffect, useState } from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { updateTaskThunk } from '../../../redux/todo-tasks/todoTask-reducer';\r\nimport { TaskType, UpdatedTaskType } from '../../../api/api';\r\n\r\ntype PropsType = {\r\n    listId: string,\r\n    task: any,\r\n    taskId: string\r\n}\r\nconst Description: React.FC<PropsType> = props => {\r\n\r\n    let [editMode, changeEditMode] = useState(false);\r\n    let [choosedTaskId, changeChoosedTaskId ] = useState('');\r\n    let [newDesc, changeNewDesc] = useState(props.task.description);\r\n    const dispatch = useDispatch()\r\n\r\n    let turnEditMode = () => {\r\n        changeEditMode(!editMode);\r\n        changeChoosedTaskId(props.taskId);\r\n    }\r\n\r\n    let onChangeDesc = (newText: string) => {\r\n        changeNewDesc(newText);\r\n    }\r\n    let updateDesc = (task: any) => {\r\n        changeEditMode(!editMode);\r\n        dispatch(updateTaskThunk(props.listId, task._id, {...task, description: newDesc}))\r\n        debugger\r\n    }\r\n    \r\n    return(\r\n        <div>\r\n            {(editMode && choosedTaskId === props.taskId)\r\n            ? <textarea onBlur={() => updateDesc(props.task)} onChange={(e) => onChangeDesc(e.currentTarget.value)} autoFocus={true} value={newDesc}></textarea>\r\n            :<span onDoubleClick={turnEditMode}>{props.task.description}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nconst DescriptionMemoization = React.memo(Description)\r\nexport default DescriptionMemoization",{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"123","replacedBy":"124"},{"ruleId":"125","replacedBy":"126"},{"ruleId":"127","severity":1,"message":"128","line":28,"column":6,"nodeType":"129","endLine":28,"endColumn":43,"suggestions":"130"},{"ruleId":"127","severity":1,"message":"131","line":40,"column":6,"nodeType":"129","endLine":40,"endColumn":8,"suggestions":"132"},{"ruleId":"127","severity":1,"message":"133","line":49,"column":6,"nodeType":"129","endLine":49,"endColumn":20,"suggestions":"134"},{"ruleId":"135","severity":1,"message":"136","line":2,"column":20,"nodeType":"137","messageId":"138","endLine":2,"endColumn":28},{"ruleId":"135","severity":1,"message":"139","line":19,"column":9,"nodeType":"137","messageId":"138","endLine":19,"endColumn":17},{"ruleId":"140","severity":1,"message":"141","line":18,"column":11,"nodeType":"142","endLine":18,"endColumn":46},{"ruleId":"143","severity":1,"message":"144","line":8,"column":9,"nodeType":"145","messageId":"146","endLine":8,"endColumn":45,"fix":"147"},{"ruleId":"127","severity":1,"message":"131","line":20,"column":8,"nodeType":"129","endLine":20,"endColumn":10,"suggestions":"148"},{"ruleId":"135","severity":1,"message":"149","line":2,"column":17,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"135","severity":1,"message":"150","line":5,"column":20,"nodeType":"137","messageId":"138","endLine":5,"endColumn":28},{"ruleId":"135","severity":1,"message":"151","line":3,"column":10,"nodeType":"137","messageId":"138","endLine":3,"endColumn":24},{"ruleId":"135","severity":1,"message":"152","line":4,"column":8,"nodeType":"137","messageId":"138","endLine":4,"endColumn":17},{"ruleId":"153","severity":1,"message":"154","line":21,"column":1,"nodeType":"155","messageId":"156","endLine":21,"endColumn":52},{"ruleId":"157","severity":1,"message":"158","line":53,"column":96,"nodeType":"159","messageId":"160","endLine":53,"endColumn":98},{"ruleId":"135","severity":1,"message":"161","line":1,"column":8,"nodeType":"137","messageId":"138","endLine":1,"endColumn":13},{"ruleId":"135","severity":1,"message":"149","line":2,"column":17,"nodeType":"137","messageId":"138","endLine":2,"endColumn":26},{"ruleId":"135","severity":1,"message":"136","line":5,"column":10,"nodeType":"137","messageId":"138","endLine":5,"endColumn":18},{"ruleId":"135","severity":1,"message":"162","line":5,"column":20,"nodeType":"137","messageId":"138","endLine":5,"endColumn":35},"no-native-reassign",["163"],"no-negated-in-lhs",["164"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'errorWrap'. Either include them or remove the dependency array.","ArrayExpression",["165"],"React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["166"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["167"],"@typescript-eslint/no-unused-vars","'TaskType' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property ['Content-Type'] found.","Property","unnecessarilyComputedProperty",{"range":"168","text":"169"},["170"],"'useEffect' is defined but never used.","'UserType' is defined but never used.","'isTryStatement' is defined but never used.","'arrowDown' is defined but never used.","no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'style' is defined but never used.","'UpdatedTaskType' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"171","fix":"172"},{"desc":"173","fix":"174"},{"desc":"175","fix":"176"},[220,236],"'Content-Type'",{"desc":"173","fix":"177"},"Update the dependencies array to be: [todoTaskError, todoError, authError, errorWrap, dispatch]",{"range":"178","text":"179"},"Update the dependencies array to be: [dispatch]",{"range":"180","text":"181"},"Update the dependencies array to be: [isAuthorized, user]",{"range":"182","text":"183"},{"range":"184","text":"181"},[1295,1332],"[todoTaskError, todoError, authError, errorWrap, dispatch]",[1612,1614],"[dispatch]",[1797,1811],"[isAuthorized, user]",[711,713]]