[{"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx":"1","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js":"2","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts":"3","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx":"4","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts":"5","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts":"6","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts":"7","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx":"8","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx":"9","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx":"10","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx":"11","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts":"12","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts":"13"},{"size":677,"mtime":1612301873000,"results":"14","hashOfConfig":"15"},{"size":362,"mtime":1612301873000,"results":"16","hashOfConfig":"15"},{"size":913,"mtime":1612301873000,"results":"17","hashOfConfig":"15"},{"size":1787,"mtime":1612301873000,"results":"18","hashOfConfig":"15"},{"size":2421,"mtime":1612301873000,"results":"19","hashOfConfig":"15"},{"size":3365,"mtime":1612301873000,"results":"20","hashOfConfig":"15"},{"size":533,"mtime":1612301873000,"results":"21","hashOfConfig":"15"},{"size":2283,"mtime":1612301873000,"results":"22","hashOfConfig":"15"},{"size":1442,"mtime":1612301873000,"results":"23","hashOfConfig":"15"},{"size":108,"mtime":1612301873000,"results":"24","hashOfConfig":"15"},{"size":967,"mtime":1612301873000,"results":"25","hashOfConfig":"15"},{"size":2087,"mtime":1612301873000,"results":"26","hashOfConfig":"15"},{"size":241,"mtime":1612301873000,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"1jfjkih",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"59","usedDeprecatedRules":"30"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\index.tsx",[],["62","63"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\reportWebVitals.js",[],["64","65"],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\redux-store.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\App.tsx",["66","67"],"import 'materialize-css';\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Redirect, Route, Switch } from 'react-router-dom';\nimport { UserType } from './api/api';\nimport './App.css';\nimport { LogInPage } from './components/Auth/LogIn/LogIn';\nimport { SignUpPage } from './components/Auth/SignUp/SignUp';\nimport { Header } from './components/Common/Header/Header';\nimport { StarterPage } from './components/Common/Starter_page/StarterPage';\nimport { actions } from './redux/auth/auth-reducer';\nimport { getIsAuthorized, getUserInfo } from './redux/auth/auth-selectors';\n\nconst App = () => {\n\n  const isAuthorized = useSelector(getIsAuthorized)\n  const user = useSelector(getUserInfo)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    // debugger\n    let user: UserType\n    let isExist = localStorage.getItem('items')\n    if (isExist !== null) {\n      user = JSON.parse(isExist)\n      if (user) {\n        dispatch(actions.setUser(user))\n        dispatch(actions.setIsAuthorized(true))\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    \n    if (isAuthorized === true) {\n      localStorage.setItem('items', JSON.stringify(user))\n    } else {\n      localStorage.removeItem('items');\n    }\n  }, [isAuthorized])\n\n  return (\n    <div className=\"container\">\n      <Header />\n      {isAuthorized\n        ? (<Switch>\n            <Route path='/start' exact render={() => <StarterPage />}></Route>\n            <Redirect to='/start' />\n        </Switch>)\n        : (<Switch>\n            <Route path='/login' exact render={() => <LogInPage />}></Route>\n            <Route path='/regist' exact render={() => <SignUpPage />}></Route>\n            <Redirect to='/login' />\n        </Switch>)\n      }\n    </div>\n  )\n\n}\n\nexport default App;\n\n\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-reducer.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\todo\\todo-reducer.ts",["68"],"import { todoAPI } from './../../api/api';\nimport { ListType, TaskType } from '../../api/api';\nimport { AppStateType, BasicThunkType, InferActionsType } from '../redux-store';\n// import { toDoAPI } from \"../api/api\";\n\nconst SET_LISTS = 'SET-LISTS';\nconst SET_TASKS = 'SET-TASKS';\nconst CREATE_LIST = 'CREATE-LIST';\nconst DELETE_LIST = 'DELETE-LIST';\nconst RENAME_LIST = 'RENAME-LIST';\nconst IS_FETCH = 'IS-FETCH';\n\nconst initialState = {\n    lists: [\n        {\n            \"_id\": \"9f27f97b-bc63-4114-9baa-c91facbd4ffb\",\n            \"title\": \"what todo\",\n            \"addedDate\": \"2019-07-30T12:24:15.063\",\n            \"order\": 0\n        }\n    ] as Array<ListType>,\n    tasks: [] as Array<TaskType>,\n    isFetching: false\n}\n\nconst toDoPage = (state = initialState, action: ActionsType): InitialStateType => {\n\n    switch (action.type) {\n        case SET_LISTS: {\n\n            return {\n                ...state,\n                lists: action.lists\n            }\n        }\n        case CREATE_LIST: {\n            return {\n                ...state,\n                lists: [action.list, ...state.lists]\n            }\n        }\n        case DELETE_LIST: {\n            return {\n                ...state,\n                lists: state.lists.filter(list => list._id !== action.todolistId)\n            }\n        }\n        case RENAME_LIST: {\n            return {\n                ...state,\n                lists: state.lists.map(list => { if (list._id === action.todolistId) { return { ...list, title: action.title } } else return list })\n            }\n        }\n        case IS_FETCH: {\n            return {\n                ...state,\n                isFetching: action.bool\n            }\n        }\n        default: {\n            return state;\n        }\n    }\n}\nexport const actions = {\n    setLists: (lists: Array<ListType>) => ({ type: SET_LISTS, lists } as const),\n    setTasks: (tasks: Array<any>) => ({ type: SET_TASKS, tasks } as const),\n    createList: (list: any) => ({ type: CREATE_LIST, list } as const),\n    deleteList: (todolistId: string) => ({ type: DELETE_LIST, todolistId } as const),\n    renameTitle: (todolistId: string, title: string) => ({ type: RENAME_LIST, todolistId, title } as const),\n    isFetching: (bool: boolean) => ({ type: IS_FETCH, bool } as const),\n}\n\nexport const getLists = (): ThunkType => async dispatch => {\n    dispatch(actions.isFetching(true));\n    let response = await todoAPI.getToDoLists();\n    dispatch(actions.isFetching(false));\n    (response.length !== 0) && dispatch(actions.setLists(response));\n}\n\n// export const postList = (title) => async (dispatch) => {\n//     let response = await toDoAPI.postToDoLists(title);\n//     (response.resultCode === 0) && dispatch(createList(response.data.item));\n// }\n\n// export const deleteListThunk = (todolistId) => async (dispatch) => {\n//     let response = await toDoAPI.deleteToDoList(todolistId);\n//     (response.resultCode === 0) && dispatch(deleteList(todolistId));\n// }\n\n\n// export const renameTitleThunk = (todolistId, title) => async (dispatch) => {\n//     let response = await toDoAPI.renameToDoList(todolistId, title);\n//     (response.resultCode === 0) && dispatch(renameTitle(todolistId, title))\n// }\n\nexport default toDoPage;\n\nexport type InitialStateType = typeof initialState\ntype ActionsType = InferActionsType<typeof actions>\ntype ThunkType = BasicThunkType<ActionsType>\n","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\redux\\auth\\auth-selectors.ts",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\SignUp\\SignUp.tsx",["69","70"],"import { Formik } from \"formik\"\nimport { useEffect } from \"react\"\nimport { useDispatch, useSelector } from \"react-redux\"\nimport { useHistory } from \"react-router-dom\"\nimport { actions, signUpThunk } from \"../../../redux/auth/auth-reducer\"\nimport { getMessage } from \"../../../redux/auth/auth-selectors\"\nimport { useMessage } from \"../../Common/Hooks/message\"\ntype PropsType = {\n    \n}\n\nexport const SignUpPage: React.FC<PropsType> = () => {\n  const errorWrap = useMessage()\n  const errors = useSelector(getMessage)\n  const dispatch = useDispatch()\n  const history = useHistory()\n  \n  useEffect(() => {\n    errorWrap(errors)\n    dispatch(actions.setErrors(null))\n  }, [errors])\n  \n  \n    const submitHandler = async (values: SignUpValuesType, actions: any) => {\n      let response: any\n      if(values){\n        response = await dispatch(signUpThunk(values))\n        !errors && history.push('/login')\n      }\n    }\n    \n    return (<div>\n        <Formik\n            initialValues={{\n                firstName: '',\n                lastName: '',\n                email: '',\n                password: ''\n            }}\n            onSubmit={submitHandler}\n        >\n       {props => (\n         <form onSubmit={props.handleSubmit}>\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='First name'\n             name=\"firstName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Last name'\n             name=\"lastName\"\n           />\n           <input\n             type=\"text\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Email'\n             name=\"email\"\n           />\n           <input\n             type=\"password\"\n             onChange={props.handleChange}\n             onBlur={props.handleBlur}\n             placeholder='Password'\n             name=\"password\"\n           />\n           \n           <button type=\"submit\">Submit</button>\n         </form> \n       )}\n     </Formik>\n    </div>)\n}\n\nexport type SignUpValuesType = {\n    firstName: string,\n    lastName: string,\n    email: string,\n    password: string,\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Auth\\LogIn\\LogIn.tsx",["71"],"import { Formik } from \"formik\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { actions, logInThunk } from \"../../../redux/auth/auth-reducer\";\nimport { useMessage } from \"../../Common/Hooks/message\";\nimport { getMessage } from './../../../redux/auth/auth-selectors';\n\nexport const LogInPage = () => {\n  const errorWrap = useMessage()\n  const errors = useSelector(getMessage)\n  const dispatch = useDispatch()\n  \n\n  useEffect(() => {\n    errorWrap(errors)\n    dispatch(actions.setErrors(null))\n  }, [errors])\n\n  const submitHandler = (values: LogInValuesType, actions: any) => {\n    values && dispatch(logInThunk(values))\n  }\n\n  return (<div>\n    <Formik\n      initialValues={{\n        email: '',\n        password: '',\n      }}\n      onSubmit={submitHandler}\n    >\n      {props => (\n        <form onSubmit={props.handleSubmit}>\n          <input\n            type=\"text\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Email'\n            name=\"email\"\n          />\n          <input\n            type=\"password\"\n            onChange={props.handleChange}\n            onBlur={props.handleBlur}\n            placeholder='Password'\n            name=\"password\"\n          />\n\n          <button type=\"submit\">Submit</button>\n        </form>\n      )}\n    </Formik>\n  </div>)\n}\n\nexport type LogInValuesType = {\n  email: string,\n  password: string,\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Starter_page\\StarterPage.tsx",[],"F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Header\\Header.tsx",["72"],"import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport { actions } from '../../../redux/auth/auth-reducer';\nimport { getIsAuthorized } from '../../../redux/auth/auth-selectors';\n\nexport const Header = () => {\n    const isAuthorized = useSelector(getIsAuthorized)\n    const dispatch = useDispatch()\n\n    const onLogOut = () => {\n        dispatch(actions.setIsAuthorized(false))\n    }\n\n    return (\n        <nav>\n        <div className=\"nav-wrapper\">\n          <a href=\"#\" className=\"brand-logo\">MKdir</a>\n          <ul id=\"nav-mobile\" className=\"right hide-on-med-and-down\">\n            {isAuthorized \n            ? <li><NavLink to='/logout' onClick={onLogOut}>Logout</NavLink></li>\n            : <> <li><NavLink to='/login'>Log in</NavLink></li>\n              <li><NavLink to='/regist' >Sign up</NavLink></li></>\n            }\n          </ul>\n        </div>\n        \n      </nav>\n    );\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\api\\api.ts",["73"],"import { LogInValuesType } from './../components/Auth/LogIn/LogIn';\n  \nimport axios from 'axios'\nimport { SignUpValuesType } from '../components/Auth/SignUp/SignUp';\n\nconst instance = axios.create({\n    headers: { ['Content-Type']: 'application/json'}\n});\n\n\n\nexport const authAPI = {\n    logIn(user: LogInValuesType){  \n        return instance.post(`/api/auth/login`,user)\n        .then(response => response.data)\n    },\n    signUp(user: SignUpValuesType){\n        return instance.post(`/api/auth/register`,user)\n        .then(response => response.data)\n    }\n} \nexport const todoAPI = {\n    getToDoLists(){\n        return instance.get(`/todo-lists`)\n            .then(response => response.data)\n    },\n    // postToDoLists(title){\n    //     return instance.post(`/todo-lists`, {title})\n    //         .then(response => response.data);\n    //         //resultCode messages[]\n    //         // data -> item:{id title addedDate order}\n    // },\n    // renameToDoList(todolistId, title){\n    //     return instance.put(`/todo-lists/${todolistId}`, {title})\n    //         .then(response => response.data);\n    //         //check response\n    // },\n    // deleteToDoList(todolistId){\n    //     return instance.delete(`/todo-lists/${todolistId}`)\n    //         .then(response => response.data);\n    //         //resultCode messages[] data{}\n    // },\n    // reorderToDoList(todolistId: , putAfterItemId){\n    //     //putAfterItemId: 'string'\n    //     return instance.put(`/todo-lists/${todolistId}/reorder`, {putAfterItemId: putAfterItemId})\n    //         .then(response => response.data);\n    //         //resultCode messages[] data{}\n    // }\n}\nexport type UserType = {\n    firstName: null | string,\n    lastName: null | string,\n    token: null | string,\n    userId: null | string\n}\nexport type ListType = {\n   _id: string,\n   title: string,\n   addedDate: string,\n   order: number \n}\nexport type TaskType = {\n    description: string,\n    title: string,\n    priority: number,\n    completed: boolean,\n    startDate: string,\n    deadline: string,\n    order: number,\n    listId: string\n}","F:\\FrontEnd\\React\\Node-js\\mern_todo\\client\\src\\components\\Common\\Hooks\\message.ts",[],{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"74","replacedBy":"75"},{"ruleId":"76","replacedBy":"77"},{"ruleId":"78","severity":1,"message":"79","line":31,"column":6,"nodeType":"80","endLine":31,"endColumn":8,"suggestions":"81"},{"ruleId":"78","severity":1,"message":"82","line":40,"column":6,"nodeType":"80","endLine":40,"endColumn":20,"suggestions":"83"},{"ruleId":"84","severity":1,"message":"85","line":3,"column":10,"nodeType":"86","messageId":"87","endLine":3,"endColumn":22},{"ruleId":"78","severity":1,"message":"88","line":21,"column":6,"nodeType":"80","endLine":21,"endColumn":14,"suggestions":"89"},{"ruleId":"84","severity":1,"message":"90","line":27,"column":9,"nodeType":"86","messageId":"87","endLine":27,"endColumn":17},{"ruleId":"78","severity":1,"message":"88","line":17,"column":6,"nodeType":"80","endLine":17,"endColumn":14,"suggestions":"91"},{"ruleId":"92","severity":1,"message":"93","line":18,"column":11,"nodeType":"94","endLine":18,"endColumn":46},{"ruleId":"95","severity":1,"message":"96","line":7,"column":16,"nodeType":"97","messageId":"98","endLine":7,"endColumn":52,"fix":"99"},"no-native-reassign",["100"],"no-negated-in-lhs",["101"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["102"],"React Hook useEffect has a missing dependency: 'user'. Either include it or remove the dependency array.",["103"],"@typescript-eslint/no-unused-vars","'AppStateType' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'errorWrap'. Either include them or remove the dependency array.",["104"],"'response' is assigned a value but never used.",["105"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-useless-computed-key","Unnecessarily computed property ['Content-Type'] found.","Property","unnecessarilyComputedProperty",{"range":"106","text":"107"},"no-global-assign","no-unsafe-negation",{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},{"desc":"112","fix":"113"},{"desc":"112","fix":"114"},[214,230],"'Content-Type'","Update the dependencies array to be: [dispatch]",{"range":"115","text":"116"},"Update the dependencies array to be: [isAuthorized, user]",{"range":"117","text":"118"},"Update the dependencies array to be: [dispatch, errorWrap, errors]",{"range":"119","text":"120"},{"range":"121","text":"120"},[1069,1071],"[dispatch]",[1254,1268],"[isAuthorized, user]",[667,675],"[dispatch, errorWrap, errors]",[550,558]]